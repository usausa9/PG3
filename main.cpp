#include "DxLib.h"
#include "Enemy.h"

#include <list>
#include <vector>
#include <memory>

// ウィンドウのタイトルに表示する文字列
const char TITLE[] = "LE2A_24_ワダ_カズマ 03_02";

// ウィンドウ横幅
const int WIN_WIDTH = 600;

// ウィンドウ縦幅
const int WIN_HEIGHT = 400;

int WINAPI WinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR lpCmdLine,
                   _In_ int nCmdShow) {
	// ウィンドウモードに設定
	ChangeWindowMode(TRUE);

	// ウィンドウサイズを手動では変更させず、
	// かつウィンドウサイズに合わせて拡大できないようにする
	SetWindowSizeChangeEnableFlag(FALSE, FALSE);

	// タイトルを変更
	SetMainWindowText(TITLE);

	// 画面サイズの最大サイズ、カラービット数を設定(モニターの解像度に合わせる)
	SetGraphMode(WIN_WIDTH, WIN_HEIGHT, 32);

	// 画面サイズを設定(解像度との比率で設定)
	SetWindowSizeExtendRate(1.0);

	// 画面の背景色を設定する
	SetBackgroundColor(0x00, 0x00, 0x00);

	// DXlibの初期化
	if (DxLib_Init() == -1) { return -1; }

	// (ダブルバッファ)描画先グラフィック領域は裏面を指定
	SetDrawScreen(DX_SCREEN_BACK);

	// 画像などのリソースデータの変数宣言と読み込み


	// ゲームループで使う変数の宣言

	std::vector<std::unique_ptr<Enemy>> enemies_;

	for (int i = 0; i < 5; i++)
	{
		std::unique_ptr<Enemy> newEnemy = std::make_unique<Enemy>(140 + 70 * i , 300);
		enemies_.emplace_back(std::move(newEnemy));
	}
	
	// 最新のキーボード情報用
	char keys[256] = {0};

	// 1ループ(フレーム)前のキーボード情報
	char oldkeys[256] = {0};

	// ゲームループ
	while (true) {

		for (int i = 0; i < 256; i++) 
		{
			oldkeys[i] = keys[i];
		}

		// 最新のキーボード情報だったものは1フレーム前のキーボード情報として保存
		// 最新のキーボード情報を取得
		GetHitKeyStateAll(keys);

		// 画面クリア
		ClearDrawScreen();
		//---------  ここからプログラムを記述  ----------//

		// 更新処理
		if (keys[KEY_INPUT_R] && oldkeys[KEY_INPUT_R] == false)
		{
			for (int i = 0; i < 5; i++)
			{
				std::unique_ptr<Enemy> newEnemy = std::make_unique<Enemy>(140 + 70 * i, 300);
				enemies_.emplace_back(std::move(newEnemy));
			}

			Enemy::isAllDead = false;
		}

		for (std::unique_ptr<Enemy>& enemy : enemies_) 
		{
			enemy->Update();

			if (enemy->GetAllDead()) {
				enemies_.clear();
			}
		}

		if (keys[KEY_INPUT_Y] && oldkeys[KEY_INPUT_Y] == false)
		{
			for (std::unique_ptr<Enemy>& enemy : enemies_) 
			{
				if (enemy->x < 150)
				{
					enemy->SetIsDead();
				}
			}
		}

		if (keys[KEY_INPUT_I] && oldkeys[KEY_INPUT_I] == false)
		{
			for (std::unique_ptr<Enemy>& enemy : enemies_)
			{
				if (enemy->x > 400)
				{
					enemy->SetIsDead();
				}
			}
		}


		// 描画処理
		const int cWhite = 0xffffff;

		DrawFormatString(20, 80, cWhite, "\"キーバインド\"");
		DrawFormatString(20, 100, cWhite, "R : 最初の状態に戻す");
		DrawFormatString(20, 120, cWhite, "Y : 一番左の敵に攻撃");
		DrawFormatString(20, 140, cWhite, "I : 一番左の敵に攻撃");

		for (std::unique_ptr<Enemy>& enemy : enemies_)
		{
			DrawCircle(enemy->x, enemy->y, 12, 0xffff00);
		}

		//---------  ここまでにプログラムを記述  ---------//
		// (ダブルバッファ)裏面
		ScreenFlip();

		// 20ミリ秒待機(疑似60FPS)
		WaitTimer(20);

		// Windowsシステムからくる情報を処理する
		if (ProcessMessage() == -1) {
			break;
		}

		// ESCキーが押されたらループから抜ける
		if (CheckHitKey(KEY_INPUT_ESCAPE) == 1) {
			break;
		}
	}
	// Dxライブラリ終了処理
	DxLib_End();

	// 正常終了
	return 0;
}
